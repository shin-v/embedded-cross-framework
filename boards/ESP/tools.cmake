set(IDF_VERSION "v5.2.2")
set(${board_name}_FIRMWARE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/firmware/espressif/esp-idf-${IDF_VERSION})
set(${board_name}_BOARD_COMPONENTS_DIR ${${board_name}_FIRMWARE_DIR}/components)

set(${board_name}_INCDIR "${${board_name}_DIR}/../include")

# Function to parse sdkconfig.h and set variables for CMakeLists.txt of the loading components
function(parse_sdkconfig_h sdkconfig_h_path)
    if(EXISTS ${sdkconfig_h_path})
        file(STRINGS ${sdkconfig_h_path} sdkconfig_contents)
        foreach(line ${sdkconfig_contents})
            if(line MATCHES "^#define[ \t]+(CONFIG_[^ \t]+)[ \t]+(.+)$")
                set(${CMAKE_MATCH_1} ${CMAKE_MATCH_2} CACHE INTERNAL "")
            endif()
        endforeach()
    endif()
endfunction()

# Overriding the idf functions to tailor to our needs
function(idf_build_get_property var property)
    set(val "")
    if(property STREQUAL "IDF_TARGET")
        set(val ${board_name}_TARGET)
    endif()
    set(${var} ${val} PARENT_SCOPE)
endfunction()

function(idf_component_register)
    set(options WHOLE_ARCHIVE)
    set(single_value KCONFIG KCONFIG_PROJBUILD)
    set(multi_value SRCS SRC_DIRS EXCLUDE_SRCS INCLUDE_DIRS PRIV_INCLUDE_DIRS LDFRAGMENTS REQUIRES PRIV_REQUIRES REQUIRED_IDF_TARGETS EMBED_FILES EMBED_TXTFILES)
    cmake_parse_arguments(arg "${options}" "${single_value}" "${multi_value}" ${ARGN})

    get_filename_component(component_dir ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)
    get_filename_component(component_name ${component_dir} NAME)
    message(STATUS "Processing component: ${component_name}")

    # Don't do it for freertos. Manually include it
    if(NOT ${component_name} STREQUAL "freertos")
        set(component_srcs "")
        set(component_incdirs "")
        set(component_priv_incdirs "")
        set(component_ldfragments "")

        if(arg_SRCS)
            foreach(src IN LISTS arg_SRCS)  
                list(APPEND component_srcs "${component_dir}/${src}")
            endforeach()
        endif()

        if(arg_SRC_DIRS)
            foreach(src_dir IN LISTS arg_SRC_DIRS)
                file(GLOB_RECURSE dir_srcs "${component_dir}/${src_dir}/*.c" "${component_dir}/${src_dir}/*.S")
                list(APPEND component_srcs ${dir_srcs})
            endforeach()
        endif()

        if(arg_EXCLUDE_SRCS)
            foreach(exclude_src IN LISTS arg_EXCLUDE_SRCS)
                list(REMOVE_ITEM component_srcs "${component_dir}/${exclude_src}")
            endforeach()
        endif()

        if(arg_INCLUDE_DIRS)
            foreach(incdir IN LISTS arg_INCLUDE_DIRS)
                list(APPEND component_incdirs "${component_dir}/${incdir}")
            endforeach()
        endif()

        if(arg_PRIV_INCLUDE_DIRS)
            foreach(priv_incdir IN LISTS arg_PRIV_INCLUDE_DIRS)
                list(APPEND component_priv_incdirs "${component_dir}/${priv_incdir}")
            endforeach()
        endif()

        if(NOT TARGET ${component_name})
            add_library(${component_name} STATIC ${component_srcs})
            target_include_directories(${component_name} PUBLIC ${component_incdirs})
            target_include_directories(${component_name} PRIVATE ${component_priv_incdirs})
        endif()

        if(arg_LDFRAGMENTS)
            foreach(fragment ${arg_LDFRAGMENTS})
                list(APPEND component_ldfragments "${component_dir}/${fragment}")
            endforeach()
            set_target_properties(${component_name} PROPERTIES LDFRAGMENTS "${component_ldfragments}")
        endif()

        # Honestly, this should just be in macros... Maybe? Ask my supervisor.
        list(APPEND ${project_name}_component_libraries ${component_name})
        # set(${board_name}_LIBS ${component_name} PARENT_SCOPE)

        if(arg_REQUIRES)
            foreach(req IN LISTS arg_REQUIRES)
                if(NOT TARGET ${req})
                    message(STATUS "Required component '${req}' not yet processed. Registering it now.")
                    register_component(${req})
                endif()
                if(TARGET ${req})
                    target_link_libraries(${component_name} PUBLIC ${req})
                else()
                    message(WARNING "Failed to register required component '${req}' for '${component_name}'")
                endif()
            endforeach()
        endif()

        if(arg_PRIV_REQUIRES)
            foreach(priv_req IN LISTS arg_PRIV_REQUIRES)
                if(NOT TARGET ${priv_req})
                    message(STATUS "Privately required component '${priv_req}' not yet processed. Registering it now.")
                    register_component(${priv_req})
                endif()
                if(TARGET ${priv_req})
                    target_link_libraries(${component_name} PRIVATE ${priv_req})
                else()
                    message(WARNING "Failed to register privately required component '${priv_req}' for '${component_name}'")
                endif()
            endforeach()
        endif()

        set(COMPONENT_LIB ${component_name} PARENT_SCOPE)
        
    endif()
endfunction()

function(idf_component_get_property)
endfunction()
function(idf_component_set_property)
endfunction()
function(target_linker_script)
# todo:
# implement this.
endfunction()

macro(register_component component_name)
    set(${project_name}_${component_name}_cmake "${${board_name}_BOARD_COMPONENTS_DIR}/${component_name}/CMakeLists.txt")
        if(EXISTS ${${project_name}_${component_name}_cmake})
            include(${${project_name}_${component_name}_cmake})
        else()
            message(WARNING "Component '${component_name}' not found at ${${${board_name}_BOARD_COMPONENTS_DIR}/${component_name}}")
        endif()
endmacro()

# Processing the components from esp-idf
macro(process_component_requirements)
    parse_sdkconfig_h("${${board_name}_DIR}/../include/sdkconfig.h")
    foreach(component IN LISTS ${project_name}_COMPONENT_REQUIREMENTS)
        register_component(${component})
    endforeach()
endmacro()